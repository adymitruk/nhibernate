<?xml version="1.0"?>
<project xmlns="http://nant.sf.net/release/0.85/nant.xsd">

	<property name="framework" value="${framework::get-target-framework()}"/>
	<property name="framework.family" value="${framework::get-family(framework)}"/>
	<property name="framework.version" value="${framework::get-version(framework)}"/>

	<!-- 
		These are used to set the correct attributes in AssemblyInfo.cs.  
	-->
	<property name="nh.company" value="NHibernate.org" />

	<!--
		Version number computation
		
		JBoss product versioning guidelines (http://wiki.jboss.org/wiki/Wiki.jsp?page=JBossProductVersioning)
		say we are supposed to use version numbers formatted like major.minor.patch.qualifier, where
		qualifier is alphanumeric (Alpha#, Beta#, CR#, GA, SP#), and the numeric part may be anything, e.g.
		a time/date stamp, a SVN revision number and so on.
		
		I'm only going to use simple sequential numbers for now and the script below is used to translate
		the alphanumeric version into a numeric assembly version: x.y.z.qN is translated into x.y.z.(base+N)
		where base is 1000 for Alpha, 2000 for Beta, 3000 for CR, and 4000 for both GA and SP (so GA is
		effectively SP0).
	-->
	<property name="nh.version" value="2.0.0.Alpha1" overwrite="false" />

	<!-- Compute short project version (major.minor) using a regex -->
	<regex input="${nh.version}" pattern="^(?'shortversion'\d+\.\d+)" />
	<property name="nh.version.short" value="${shortversion}" />

	<!-- Compute and set project.version.numeric from project.version if it hasn't been set already -->
	<if test="${not property::exists('nh.version.numeric')}">

		<script language="C#">
			<code>
				<![CDATA[
				public const int BaseAlpha = 1000;
				public const int BaseBeta  = 2000;
				public const int BaseCR    = 3000;
				public const int BaseGA    = 4000;
				// SP is same as GA because GA has no number and SP's start with 1.
				public const int BaseSP    = 4000;

				public static void ScriptMain(Project project)
				{
					project.Properties["nh.version.numeric"] = ToNumericVersion(
						project.Properties["nh.version"]);
				}

				public static string ToNumericVersion(string version)
				{
					int qualifierStart = version.LastIndexOf('.') + 1;
					int qualifierNumberStart = version.IndexOfAny(
						"0123456789".ToCharArray(),
						qualifierStart);

					if (qualifierNumberStart < 0) qualifierNumberStart = version.Length;

					string qualifier = version.Substring(qualifierStart, qualifierNumberStart - qualifierStart);
					int qualifierNumber = qualifierNumberStart < version.Length
						? int.Parse(version.Substring(qualifierNumberStart))
						: 0;

					int revisionBase;

					switch (qualifier)
					{
						case "Alpha": revisionBase = BaseAlpha; break;
						case "Beta":  revisionBase = BaseBeta; break;
						case "CR":    revisionBase = BaseCR; break;
						case "GA":    revisionBase = BaseGA; break;
						case "SP":    revisionBase = BaseSP; break;

						default: throw new BuildException("Unknown version qualifier " + qualifier);
					}

					string revisionNumber = (revisionBase + qualifierNumber).ToString();

					return version.Substring(0, qualifierStart) + revisionNumber;
				}
				]]>
			</code>
		</script>
	</if>

	<property name="key.file" value="${path::combine(nh.root.dir, 'nhibernate\src\NHibernate.snk')}" />

	<property name="nh.lib.dir" value="${nh.root.dir}/nhibernate/lib"/>
	<property name="nh.lib.family.dir" value="${nh.lib.dir}/${framework.family}"/>
	<property name="nh.lib.framework.dir" value="${nh.lib.family.dir}/${framework.version}"/>

</project>